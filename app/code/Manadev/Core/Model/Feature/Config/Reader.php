<?php
/**
 * @copyright   Copyright (c) http://www.manadev.com
 * @license     http://www.manadev.com/license  Proprietary License
 */
namespace Manadev\Core\Model\Feature\Config;

class Reader extends \Magento\Framework\Config\Reader\Filesystem
{
    protected $module;

    /**
     * Constructor
     *
     * @param \Magento\Framework\Config\FileResolverInterface $fileResolver
     * @param \Magento\Framework\Config\ConverterInterface $converter
     * @param \Magento\Framework\Config\SchemaLocatorInterface $schemaLocator
     * @param \Magento\Framework\Config\ValidationStateInterface $validationState
     * @param string $fileName
     * @param array $idAttributes
     * @param string $domDocumentClass
     * @param string $defaultScope
     */
    public function __construct(
        \Manadev\Core\Model\Feature\Config\FileResolver $fileResolver,
        \Manadev\Core\Model\Feature\Config\Converter $converter,
        \Manadev\Core\Model\Feature\Config\SchemaLocator $schemaLocator,
        \Magento\Framework\Config\ValidationStateInterface $validationState,
        $fileName = 'etc/feature.xml',
        $idAttributes = [],
        $domDocumentClass = 'Manadev\Core\Model\Feature\Config\Dom',
        $defaultScope = 'global'
    ) {
        parent::__construct($fileResolver, $converter, $schemaLocator, $validationState, $fileName, $idAttributes, $domDocumentClass, $defaultScope); // TODO: Change the autogenerated stub
    }

    /**
     * Read configuration files
     *
     * @param array $fileList
     * @return array
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    protected function _readFiles($fileList) {
        /** @var \Magento\Framework\Config\Dom $configMerger */
        $configMerger = null;
        foreach ($fileList as $module => $content) {
            try {
                if (!$configMerger) {
                    $this->module = $module;
                    $configMerger = $this->_createConfigMerger($this->_domDocumentClass, $content);
                } else {
                    /** @var $configMerger \Manadev\Core\Model\Feature\Config\Dom */
                    $configMerger->setModule($module);
                    $configMerger->merge($content);
                }
            } catch (\Magento\Framework\Config\Dom\ValidationException $e) {
                throw new \Magento\Framework\Exception\LocalizedException(
                    new \Magento\Framework\Phrase("Invalid XML in file %1:\n%2", [$module, $e->getMessage()])
                );
            }
        }
        if ($this->validationState->isValidationRequired()) {
            $errors = [];
            if ($configMerger && !$configMerger->validate($this->_schemaFile, $errors)) {
                $message = "Invalid Document \n";
                throw new \Magento\Framework\Exception\LocalizedException(
                    new \Magento\Framework\Phrase($message . implode("\n", $errors))
                );
            }
        }

        $output = [];
        if ($configMerger) {
            $output = $this->_converter->convert($configMerger->getDom());
        }
        return $output;
    }

    /**
     * Return newly created instance of a config merger
     *
     * @param string $mergerClass
     * @param string $initialContents
     * @param $module
     * @return \Manadev\Core\Model\Extension\Config\Dom
     */
    protected function _createConfigMerger($mergerClass, $initialContents) {
        $result = new $mergerClass($initialContents, $this->validationState, $this->_idAttributes, null, $this->_perFileSchema, null, $this->module);
        if (!$result instanceof \Magento\Framework\Config\Dom) {
            throw new \UnexpectedValueException(
                "Instance of the DOM config merger is expected, got {$mergerClass} instead."
            );
        }

        return $result;
    }
}
